import java.sql.*; 
import java.util.Scanner;

//we will assume the following table structure consisting of Students for this demo:

// +----+--------------+-----+---------------------+-------+-----+
// | ID |     Name     | Age |        Email        | Major | GPA |
// +----+--------------+-----+---------------------+-------+-----+
// |    |              |     |                     |       |     |
// +----+--------------+-----+---------------------+-------+-----+




public class accessor{

    /*
     * java database connection steps:
     *      1.) import java.sql
     *      2.) load and register the driver: com.mysql.jdbc.Driver
     *              - get the appropriate jar file from the internet 
     *              - add it to the referenced libraries
     *      3.) create a connection (Connection conn); conn is an object
     *      4.) create a statement (Statement stmt); stmt is an object
     *      5.) excecute the query (usually written in SQL)
     *      6.) process the results
     *      7.) close all open objects
     */

     public static Scanner scnr = new Scanner(System.in);


    public static void main(String[] args) throws Exception{
        //initialize the database we want to target:
        System.out.println("enter the url of your database...");
        String url = scnr.next();
        System.out.println("enter your username");
        String userName = scnr.next();
        System.out.println("enter your password");
        String passWord = scnr.next();
        System.out.println("Welcome, what will you like to do?");
        System.out.println("press A to add something to the table\npress R to remove something from the table\npress Q to quit.");
        String query = queryGenerator.generateQuery(); 


        //following is for loading and registering a driver

        Class.forName("com.mysql.jdbc.Driver"); 

        //CONNECTION
        //A connection (session) with a specific database. SQL statements are executed and results are returned within the context of a connection.
        // A Connection object's database is able to provide information describing its tables, its supported SQL grammar, its stored procedures, the 
        //capabilities of this connection, and so on. This information is obtained with the getMetaData method.

        Connection conn = DriverManager.getConnection(url, userName, passWord); //the DriverManager acts as the physical vehicle that goes to the database given url and credentials

        //STATEMENT
        //The object used for executing a static SQL statement and returning the results it produces.
        //By default, only one ResultSet object per Statement object can be open at the same time. Therefore, if the reading of one 
        //ResultSet object is interleaved with the reading of another, each must have been generated by different Statement objects. 
        //All execution methods in the Statement interface implicitly close a current ResultSet object of the statement if an open one exists.

         Statement stmt = conn.createStatement(); //creates a statement object for passing SQL queries to the database
    
        //RESULT SET
        //A table of data representing a database result set, which is usually generated by executing a statement that queries the database.
        //A ResultSet object maintains a cursor pointing to its current row of data. Initially the cursor is positioned before the first row. 
        //The next method moves the cursor to the next row, and because it returns false when there are no more rows in the ResultSet object, 
        //it can be used in a while loop to iterate through the result set.
        // A default ResultSet object is not updatable and has a cursor that moves forward only. Thus, you can iterate through it only once and only 
        //from the first row to the last row. It is possible to produce ResultSet objects that are scrollable and/or updatable. The following code fragment, 
        //in which con is a valid Connection object, illustrates how to make a result set that is scrollable and insensitive to updates by others, and that is updatable. See ResultSet fields for other options.

        ResultSet rs = stmt.executeQuery(query);

    }

}